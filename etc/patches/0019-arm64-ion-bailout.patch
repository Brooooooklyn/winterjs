diff --git a/mozjs/js/src/jit/MacroAssembler.h b/mozjs/js/src/jit/MacroAssembler.h
index 20291a45a..2dcee4e0f 100644
--- a/mozjs/js/src/jit/MacroAssembler.h
+++ b/mozjs/js/src/jit/MacroAssembler.h
@@ -899,8 +899,8 @@ class MacroAssembler : public MacroAssemblerSpecific {
   // On x86-shared, srcDest must be eax and edx will be clobbered.
   inline void mul32(Register rhs, Register srcDest) PER_SHARED_ARCH;
 
-  inline void mul32(Register src1, Register src2, Register dest, Label* onOver,
-                    Label* onZero) DEFINED_ON(arm64);
+  inline void mul32(Register src1, Register src2, Register dest, Label* onOver)
+      DEFINED_ON(arm64);
 
   inline void mul64(const Operand& src, const Register64& dest) DEFINED_ON(x64);
   inline void mul64(const Operand& src, const Register64& dest,
diff --git a/mozjs/js/src/jit/arm64/CodeGenerator-arm64.cpp b/mozjs/js/src/jit/arm64/CodeGenerator-arm64.cpp
index 1013df9cc..aeb0c97b8 100644
--- a/mozjs/js/src/jit/arm64/CodeGenerator-arm64.cpp
+++ b/mozjs/js/src/jit/arm64/CodeGenerator-arm64.cpp
@@ -335,20 +335,18 @@ void CodeGenerator::visitMulI(LMulI* ins) {
           }
         }
 
-        // Otherwise, just multiply.
+        // Otherwise, just multiply. We have to check for overflow.
+        // Negative zero was handled above.
         Label bailout;
-        Label* onZero = mul->canBeNegativeZero() ? &bailout : nullptr;
         Label* onOverflow = mul->canOverflow() ? &bailout : nullptr;
 
-        vixl::UseScratchRegisterScope temps(&masm.asVIXL());
-        const Register scratch = temps.AcquireW().asUnsized();
+        masm.move32(Imm32(constant), destreg);
+        masm.mul32(lhsreg, destreg, destreg, onOverflow);
 
-        masm.move32(Imm32(constant), scratch);
-        masm.mul32(lhsreg, scratch, destreg, onOverflow, onZero);
-        if (onZero || onOverflow) {
+        if (onOverflow) {
           bailoutFrom(&bailout, ins->snapshot());
         }
-        return;  // escape overflow check;
+        return;
     }
 
     // Overflow check.
@@ -357,14 +355,52 @@ void CodeGenerator::visitMulI(LMulI* ins) {
     }
   } else {
     Register rhsreg = ToRegister(rhs);
+    const ARMRegister rhsreg32 = ARMRegister(rhsreg, 32);
+
 
     Label bailout;
-    // TODO: x64 (but not other platforms) have an OOL path for onZero.
-    Label* onZero = mul->canBeNegativeZero() ? &bailout : nullptr;
     Label* onOverflow = mul->canOverflow() ? &bailout : nullptr;
 
-    masm.mul32(lhsreg, rhsreg, destreg, onOverflow, onZero);
-    if (onZero || onOverflow) {
+    if (mul->canBeNegativeZero()) {
+      // The product of two operands is negative zero iff one operand is
+      // zero, and the other is negative. Therefore, the sum of the
+      // two operands will also be negative (specifically, it will be
+      // the non-zero operand). If the result of the multiplication is 0,
+      // we can check the sign of the sum to determine whether we should
+      // bail out.
+
+      // If the multiplication will overwrite an operand, save that operand.
+      vixl::UseScratchRegisterScope temps(&masm.asVIXL());
+      const ARMRegister scratch32 = temps.AcquireW();
+      const Register scratch = scratch32.asUnsized();
+      ARMRegister lhsregAfter = lhsreg32;
+      ARMRegister rhsregAfter = rhsreg32;
+
+      MOZ_ASSERT(lhsreg != rhsreg);  // x*x can't be -0. See MMul::foldsTo.
+      if (lhsreg == destreg) {
+        masm.move32(lhsreg, scratch);
+        lhsregAfter = scratch32;
+      } else if (rhsreg == destreg) {
+        masm.move32(rhsreg, scratch);
+        rhsregAfter = scratch32;
+      }
+
+      // Do the multiplication.
+      masm.mul32(lhsreg, rhsreg, destreg, onOverflow);
+
+      // Bail out if (lhs * rhs == 0) && (lhs + rhs < 0)
+      Label done;
+      masm.branchTest32(Assembler::NonZero, destreg, destreg, &done);
+      masm.Add(scratch32, lhsregAfter, rhsregAfter);
+      masm.Cmp(scratch32, Operand(0));
+      bailoutIf(Assembler::LessThan, ins->snapshot());
+
+      masm.bind(&done);
+
+    } else {
+      masm.mul32(lhsreg, rhsreg, destreg, onOverflow);
+    }
+    if (onOverflow) {
       bailoutFrom(&bailout, ins->snapshot());
     }
   }
diff --git a/mozjs/js/src/jit/arm64/MacroAssembler-arm64-inl.h b/mozjs/js/src/jit/arm64/MacroAssembler-arm64-inl.h
index 6567e55c5..056eecd32 100644
--- a/mozjs/js/src/jit/arm64/MacroAssembler-arm64-inl.h
+++ b/mozjs/js/src/jit/arm64/MacroAssembler-arm64-inl.h
@@ -374,19 +374,16 @@ void MacroAssembler::subFloat32(FloatRegister src, FloatRegister dest) {
 }
 
 void MacroAssembler::mul32(Register rhs, Register srcDest) {
-  mul32(srcDest, rhs, srcDest, nullptr, nullptr);
+  mul32(srcDest, rhs, srcDest, nullptr);
 }
 
 void MacroAssembler::mul32(Register src1, Register src2, Register dest,
-                           Label* onOver, Label* onZero) {
+                           Label* onOver) {
   Smull(ARMRegister(dest, 64), ARMRegister(src1, 32), ARMRegister(src2, 32));
   if (onOver) {
     Cmp(ARMRegister(dest, 64), Operand(ARMRegister(dest, 32), vixl::SXTW));
     B(onOver, NotEqual);
   }
-  if (onZero) {
-    Cbz(ARMRegister(dest, 32), onZero);
-  }
 
   // Clear upper 32 bits.
   Mov(ARMRegister(dest, 32), ARMRegister(dest, 32));
@@ -1128,7 +1125,7 @@ void MacroAssembler::branchMul32(Condition cond, T src, Register dest,
                                  Label* label) {
   MOZ_ASSERT(cond == Assembler::Overflow);
   vixl::UseScratchRegisterScope temps(this);
-  mul32(src, dest, dest, label, nullptr);
+  mul32(src, dest, dest, label);
 }
 
 void MacroAssembler::decBranchPtr(Condition cond, Register lhs, Imm32 rhs,
